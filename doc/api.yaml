openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.2

components:

    securitySchemes:
        bearerAuth:            # arbitrary name for the security scheme
          type: http
          scheme: bearer
          bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    
    schemas:
    
      User:
        title: User
        description: This object represent a single user
        type: object
        properties:
          idUser:
            description: the identifier of the user
            type: integer
            example: 1
            readOnly: true
          username:
            description: the nickname of the user
            type: string
            minLength: 3
            maxLength: 16
            pattern: 'ˆ.+?$'
            example: 'lorenzo23'
          biography:
            description: small text describing the user
            type: string
            minLength: 1
            maxLength: 100
            pattern: "ˆ.*$"
            example: "Hi, I'm 21, I live in Rome"
          
      Image:
        title: Image
        description: This object represents a single image (photo)
        type: object
        properties:
          idImage:
            description: the identifier of the image
            type: integer
            example: 1
            readOnly: true
          idOwner:
            description: the identifier of the user who posted the foto
            type: integer
            example: 1
            readOnly: true
          dateTime:
            description: the date and the time the photo was posted
            type: string
            format: date-time
            pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z[-+]\d{2}:\d{2}$'
            example: '2023-11-25T15:30:00Z+03:00'
            minLength: 20
            maxLength: 29
            readOnly: true
          url:
            description: the location of the image on the server
            type: string
            pattern: '^/img/[a-z]+[0-9]+$'
            minLength: 3
            maxLength: 100
            example: '/img/photo123.jpg'
            #readOnly: true
            
      Like:
        title: Like
        description: This object represents a single like
        type: object
        properties:
          idLike:
            description: the identifier of the like
            type: integer
            example: 1
            readOnly: true
          idLiker:
            description: the identifier of the user who liked the photo
            type: integer
            example: 1
          idImageLiked:
            description: the identifier of the photo that was liked
            type: integer
            example: 1
      
      Comment:
        title: Comment
        description: This object represents a single comment
        type: object
        properties:
          idComment:
            description: the identifier of the comment
            type: integer
            example: 1
            readOnly: true
          idUserWriter:
            description: the identifier of the user who commented on the photo
            type: integer
            example: 1
          idImageCommented:
            description: the identifier of the photo that was commented on
            type: integer
            example: 1
            readOnly: true
          text:
            description: the text of the comment
            type: string
            pattern: '.+'
            minLength: 1
            maxLength: 200
            example: beautiful picture!

tags:
- name: login
- name: image
- name: user
- name: follow
- name: stream
- name: comment
- name: ban
- name: like
  
paths:
  /session:
    #doLogin
    post:
      security:
        - bearerAuth: []
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: insert your username
              type: object
              properties:
                name:
                  description: username
                  type: string
                  example: 'Maria'
                  pattern: 'ˆ.+?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: returns userId
                type: object
                properties:
                  identifier:
                    description: the identifier of the user (created by the server)
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: integer
                    example: 1

  /users/{idUser}/images/:
    #uploadPhoto
    post:
      security:
        - bearerAuth: []
      tags: ["image"]
      operationId: uploadPhoto
      summary: upload new photo
      description: |
        upload a new photo using data provided in the body of the request and the id of the owner of the photo, return the full image object with the ID, URL and date/time
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Image" }
      responses:
        "201":
          description: photo succesfully uploaded
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Image" }
        "404":
          description: user not found, photo not uploaded
          content:
            application/json:
              schema:
                description: returns userId and an error string
                type: object
                properties:
                  idOwner:
                    description: the identifier of the owner of the photo
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: user id not found, photo not uploaded
        "403":
          description: you cannot upload a photo for another user, photo not uploaded
          content:
            application/json:
              schema:
                description: returns the userId and the token (bearer)
                type: object
                properties:
                  idOwner:
                    description: the identifier of the owner of the photo
                    type: integer
                    example: 1
                  token:
                    description: the identifier of the user who is trying to upload the photo
                    type: integer
                    example: 2
        "401":
          description: you must be logged in, photo not uploaded
  
  /users/{idUser}/images/{idImage}:
    #deletePhoto
    delete:
      security:
        - bearerAuth: []
      tags: ["image"]
      operationId: deletePhoto
      summary: remove an existing photo
      description: |
        remove a photo given its id and the id of the owner of the photo
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo 
        schema:
          type: integer
        required: true
      - name: idImage
        in: path
        description: the identifier of the photo to delete
        schema:
          type: integer
        required: true
      responses:
        "200":
          description: photo succesfully deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Image" }
        "401":
          description: unauthorized, only the owner can delete a photo, photo not deleted
          content:
            application/json:
              schema:
                description: returns an error string
                type: object
                properties:
                  error:
                    description: error type
                    type: string
                    example: you are not the owner of the photo or you are not logged in, photo not deleted
        "404":
          description: user and/or photo not found, photo not deleted
          content:
            application/json:
              schema:
                description: returns the idOwner, the idImage and an error string
                type: object
                properties:
                  idOwner:
                    description: the identifier of the owner of the photo
                    type: integer
                    example: 1
                  idImage:
                    description: the identifier of the photo to delete
                    type: integer
                  error:
                    description: error type
                    type: string
                    example: photo id not found, photo not deleted
  
  /users/{idUser}/images/{idImage}/comments/:
    #commentPhoto
    post:
      security:
        - bearerAuth: []
      tags: ["comment"]
      operationId: commentPhoto
      summary: comment on an existing photo
      description: |
        comment on an existing photo using data provided in the body of request, the id of the owner of the photo and the id of the photo, return the full image object and the comment object
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo
        schema:
          type: integer
        required: true
      - name: idImage
        in: path
        description: the identifier of the photo
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "200":
          description: comment successfully uploaded
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "404":
          description: user (owner and/or writer) and/or photo not found, comment not uploaded
          content:
            application/json:
              schema:
                description: returns the idUser, the idImage and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idImage:
                    description: the identiefier of the photo
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: user id and/or photo id not found, comment not uploaded
        "403":
          description: you have been banned/you have banned from the/the image owner, comment not uploaded
          content:
            application/json:
              schema:
                description: returns the idUser, the idImage and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idImage:
                    description: the identiefier of the photo
                    type: integer
                    example: 1
                  text:
                    description: the text of the comment
                    type: string
                    example: beautiful picture!                  

  /users/{idUser}/images/{idImage}/comments/{idComment}:
    #uncommentPhoto
    delete:
      security:
        - bearerAuth: []
      tags: ["comment"]
      operationId: uncommentPhoto
      summary: remove an existing comment
      description: |
        remove an existing comment given its id, the photo id and the owner of the photo id
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo
        schema:
          type: integer
        required: true
      - name: idImage
        in: path
        description: the identifier of the photo
        schema:
          type: integer
        required: true
      - name: idComment
        in: path
        description: the identifier of the comment
        schema:
          type: integer
        required: true
      responses:
        "200":
          description: comment succesfully deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "404":
          description: comment/image/user not found, comment not deleted
          content:
            application/json:
              schema:
                description: returns the idComment and an error string
                type: object
                properties:
                  idComment:
                    description: the identifier of the comment
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: comment id not found, comment not deleted
  
  /users/{idUser}/bans/:
    #banUser
    post:
      security:
        - bearerAuth: []
      tags: ["ban"]
      operationId: banUser
      summary: ban an existing user
      description: |
        ban an existing (and not banned) user given its id
      parameters:
      - name: idUser
        in: path
        description: the identifier of the user who is banning the other user
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: requests the id of the user to ban
              type: object
              properties:
                idUserToBan:
                  description: the identifier of the user to ban
                  type: integer
                  example: 1
      responses:
        "200":
          description: user banned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403":
          description: user already banned/you can't ban an user for another user/you can't ban yourself, not banned
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToBan and the token
                type: object
                properties:
                  idUser:
                    description: the id of the user who is banning
                    type: integer
                    example: 1
                  idUserToBan:
                    description: the id of the user to ban
                    type: integer
                    example: 2
                  token: 
                    description: the authentication token
                    type: integer
                    example: 1
        "404":
          description: user not found, user not banned
          content:
            application/json:
              schema:
                description: returns the idUser and the idUserToBan
                type: object
                properties:
                  idUser:
                    description: id of the user who is banning
                    type: integer
                    example: 2
                  idUserToBan:
                    description: the identifier of the user to ban
                    type: integer
                    example: 1
        "401":
          description: you must be logged in, not banned
  
  /users/{idUser}/bans/{idUserBanned}:
    #unbanUser
    delete:
      security:
        - bearerAuth: []
      tags: ["ban"]
      operationId: unbanUser
      summary: unban an existing user
      description: |
        unban an existing (and already banned) user given its id
      parameters:
      - name: idUser
        in: path
        description: id of the user who is unbanning the other user
        schema:
          type: integer
          example: 1
        required: true
      - name: idUserBanned
        in: path
        description: id of the user to unban
        schema:
          type: integer
          example: 1
        required: true
      responses:
        "200":
          description: user succesfully unbanned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "401":
          description: you must be logged in, not banned
        "403":
          description: you can't sban an user for another user/you can't sban yourself, not sbanned
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToBan and the token
                type: object
                properties:
                  idUser:
                    description: id of the user who is sbanning
                    type: integer
                    example: 1
                  idUserToSban:
                    description: if of the user to sban
                    type: integer
                    example: 2
                  token:
                    description: the authentication token
                    type: integer
                    example: 1
        "404":
          description: user (sbanner/to sban) not found, not sbanned
          content:
            application/json:
              schema:
                description: returns the idUser and the idUserToBan
                type: object
                properties:
                  idUser:
                    description: id of the user who is sbanning
                    type: integer
                    example: 1
                  idUserToSban:
                    description: if of the user to sban
                    type: integer
                    example: 2
  
  /users/{idUser}/images/{idImage}/likes/:
    #likePhoto
    post:
      security:
        - bearerAuth: []
      tags: ["like"]
      operationId: likePhoto
      summary: liking an existing photo
      description: |
        liking an existing photo using data provided in the body of request and the photo id and the owner of the photo id, return the full image object
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo
        schema:
          type: integer
        required: true
      - name: idImage
        in: path
        description: the identifier of the photo
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: requests the idImageLiked
              type: object
              properties:
                idImageLiked:
                  description: id of the image liked
                  type: integer
                  example: 1
      responses:
        "200":
          description: photo succesfully liked
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Like' }
        "404":
          description: user and/or photo not found, photo not liked
          content:
            application/json:
              schema:
                description: returns the idUser and the idImage
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idImage:
                    description: the identifier of the image
                    type: integer
                    example: 1
        "403":
          description: |
            you can't like a photo of a user who has banned you/you can't like a photo of a user you have banned/you can't like a photo you have already liked, not liked
          content:
            application/json:
              schema:
                description: returns the idImage, the idLiker and the idOwner
                type: object
                properties:
                  idImage:
                    description: id of the image
                    type: integer
                    example: 1
                  idLiker:
                    description: id of the user (liker)
                    type: integer
                    example: 1
                  idOwner:
                    description: id of the owner of the photo
                    type: integer
                    example: 2
        "401":
          description: you must be logged in, not liked
  
  /users/{idUser}/images/{idImage}/likes/{idLike}:
    #unlikePhoto
    delete:
      security:
        - bearerAuth: []
      tags: ["like"]
      operationId: unlikePhoto
      summary: remove an existing like
      description: |
        remove a like given its id, the photo id and the owner of the photo id
      parameters:
      - name: idUser
        in: path
        description: the identifier of the owner of the photo
        schema:
          type: integer
        required: true
      - name: idImage
        in: path
        description: the identifier of the photo
        schema:
          type: integer
        required: true
      - name: idLike
        in: path
        description: the identifier of the like
        schema:
          type: integer
        required: true
      responses:
        "200":
          description: like succesfully deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "401":
          description: unauthorized, only the owner can delete a like, like not deleted
          content:
            application/json:
              schema:
                description: returns an error string
                type: object
                properties:
                  error:
                    description: error type
                    type: string
                    example: you are not the owner of the like or you are not logged in, like not deleted
        "404":
          description: like not found, like not deleted
          content:
            application/json:
              schema:
                description: returns the idLike and an error string
                type: object
                properties:
                  idLike:
                    description: the identifier of the like to delete
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: like id not found, like not deleted
  
  /users/{idUser}:
    #getUserProfile
    get:
      security:
        - bearerAuth: []
      tags: ["user"]
      operationId: getUserProfile
      summary: return the user profile
      description: |
        return the user profile given its id, the user profile is composed by the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following
      parameters:
        - name: idUser
          in: path
          description: identifier of the user
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: user profile
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    followCount:
                      description: the counter of the user you are following
                      type: integer
                      example: 250
                    followerCount:
                      description: the counter of the users who follow you
                      type: integer
                      example: 185
                - $ref: "#/components/schemas/Image"
        "401":
          description: authentication is required
          content:
            application/json:
              schema:
                description: returns an error string
                type: object
                properties:
                  error:
                    description: error type
                    type: string
                    example: authentication is required, please log in into your account
        "403":
          description: you cannot see the profile of a user who has banned you/you banned
          content:
            application/json:
              schema:
                description: return the idUser
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
        "404":
          description: user not found
          content:
            application/json:
              schema:
                description: returns the idUser and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: id user not found
    
    #setMyUserName
    put:
      security:
        - bearerAuth: []
      tags: ["user"]
      operationId: setMyUserName
      summary: set/update username
      description: |
        update a user's username given their id and new username, returns all User's informations
      parameters:
      - name: idUser
        in: path
        schema:
          type: integer
          example: 1
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newUsername:
                  description: the new username
                  type: string
                  pattern: 'ˆ.+?$'
                  minLength: 3
                  maxLength: 16
                  example: 'username2'
      responses:
        "200":
          description: username successfully changed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: user id not found, username not changed
          content:
            application/json:
              schema:
                description: returns the idUser and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: user identifier not found, username not uploaded
        "409":
          description: username already used, username not changed
          content:
            application/json:
              schema:
                description: returns the username
                type: object
                properties:
                  username:
                    description: the username choosen
                    type: string
                    example: paper23
        "403":
          description: you can't change the userame of another user, username not changed
          content:
            application/json:
              schema:
                description: returns the idUser and the token
                type: object
                properties:
                  idUser:
                    description: the identifier of the user whose name you want to change
                    type: integer
                    example: 1
                  token:
                    description: the id of the user who is logged into WASAPhoto
                    type: integer
                    example: 2
        "401":
          description: you must be logged in , username not changed
  
  /users/{idUser}/follows/:
    #followUser
    post:
      security:
        - bearerAuth: []
      tags: ["follow"]
      operationId: followUser
      summary: following an existing user
      description: |
        following an existing user using data provided in the body of the request and the user id in the path
      parameters:
      - name: idUser
        in: path
        schema:
          type: integer
          example: 1
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: requests the idUserToFollow
              type: object
              properties:
                idUserToFollow:
                  description: the identifier of the user to follow
                  type: integer
                  example: 1
      responses:
        "200":
          description: user successfully followed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: user not found, not followed
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToFollow and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idUserToFollow:
                    description: the identifier of the user to follow
                    type: integer
                    example: 2
                  error:
                    description: error type
                    type: string
                    example: user id or userToFollow id not found, user not followed
        "403":
          description: you have been banned from the user and/or you have banned the user/you can't follow yourself/you cannot follow an user for another user, not followed
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToFollow and the token (bearer)
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idUserToFollow:
                    description: the identifier of the user to follow
                    type: integer
                    example: 2
                  token:
                    description: the authentication token
                    type: integer
                    example: 3
        "401":
          description: you must be logged in, not followed
  
  /user/{idUser}/follows/{idUserToUnfollow}:
    #unfollowUser
    delete:
      security:
        - bearerAuth: []
      tags: ["follow"]
      operationId: unfollowUser
      summary: unfollow an existing and followed user
      description: |
        unfollow an existing and followed user given its id
      parameters:
      - name: idUser
        in: path
        schema:
          type: integer
          example: 1
        required: true
      - name: idUserToUnfollow
        in: path
        schema:
          type: integer
          example: 1
        required: true
      responses:
        "200":
          description: user succesfully unfollowed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403":
          description: |
            forbidden, you can't unfollow an user if you don't follow him first/you can't unfollow a user who has banned you and/or you already banned/you can't unfollow an user for another user, user not unfollowed
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToUnfollow and the token (bearer)
                type: object
                properties:
                  idUser:
                    description: the identifier of the user to unfollow
                    type: integer
                    example: 1
                  idUserToUnfollow:
                    description: the identifier of the user to unfollow
                    type: integer
                    example: 1
                  token:
                    description: the authentication token
                    type: integer
                    example: 3
        "404":
          description: user not found, user not unfollowed
          content:
            application/json:
              schema:
                description: returns the idUser, the idUserToUnfollow and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  idUserToUnfollow:
                    description: the identifier of the user to unfollow
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: user/user to unfollow id not found, user not unfollowed
        "401":
          description: you must be logged in, not unfollowed

  /user/{idUser}/stream:
    #getMyStream
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      operationId: getMyStream
      summary: get images of followed users
      description: |
        get images of followed users in chronological order (from the most recent to the oldest)
      parameters:
      - name: idUser
        in: path
        required: true
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: my stream (feed)
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Image"
        "401":
          description: you must be logged in
          content:
            application/json:
              schema:
                description: returns an error string
                type: object
                properties:
                  error:
                    description: error type
                    type: string
                    example: you must be logged in to see you stream
        "403":
          description: you cant' see another user's stream
          content:
            application/json:
              schema:
                description: returns an error string
                type: object
                properties:
                  error:
                    description: error type
                    type: string
                    example: you can't see antoher user's stream, forbidden
        "404":
          description: user not found
          content:
            application/json:
              schema:
                description: returns the idUser and an error string
                type: object
                properties:
                  idUser:
                    description: the identifier of the user
                    type: integer
                    example: 1
                  error:
                    description: error type
                    type: string
                    example: user/user id not found
